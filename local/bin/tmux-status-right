#!/bin/bash
TIME_ZONE='America/New_York'
disk_usage=
adjusted_load_avg=
shown_load_type=
ram_usage=
INFO_BLUE='colour33'
WARNING_ORANGE='colour166'
WARNING_RED='colour160'
NORMAL_GREY='colour237'
TEXT_GRAY='colour245'
TEXT_WHITE='colour15'
# The UTC part of the date has non-printed style data which is 20 chars long.
NON_PRINTED_CHARS=20

log_high_cpu() {
    local last_logged=0
    local log_ts
    local logdir="$XDG_STATE_HOME/high_cpu_detail/"
    local logfile
    local log_frequency=60
    mkdir -p "$logdir"
    if [[ -f "$HOME/.local/state/high_cpu_detail/last-logged.txt" ]]; then
        last_logged=$(cat "$logdir/last-logged.txt")
    fi
    current_timestamp=$(date -u +%s)
    if (( (current_timestamp - last_logged) > log_frequency )); then
        logfile="$logdir/high-load-$(date -u +'%Y%m%d').log"
        log_ts=$(date -u +%Y-%m-%dT%H:%M:%S)
        processes_to_log_count=10
        echo "## [$log_ts] Details for $shown_load_type load at $adjusted_load_avg" >> "$logfile"
        ps -eo pcpu,pid,user,args | tail -n +2 | sort -k1 -r -n | head -$processes_to_log_count | ts '[%Y-%m-%dT%H:%M:%S]' >> "$logfile"
        date -u +%s > "$HOME/.local/state/high_cpu_detail/last-logged.txt"
    fi
}

is_cpu_load_high() {
    local performance_cores
    local recent_load_avg
    local long_load_avg
    local last_logged=0
    # Get number of cores on a system, excluding efficiency cores iff on an Alder Lake system
    performance_cores=$(lscpu --all --extended | tail -n +2 | awk '{ print $4 }' | uniq -c | awk '{ print $1 }' | uniq -c | head -n1 | awk '{ print $1 }')
    recent_load_avg=$(awk '{ print $1 }' /proc/loadavg) # 1 minute load average
    recent_load_avg=$(echo "( ${recent_load_avg} / ${performance_cores} )" | bc -l | xargs printf "%.2f")
    long_load_avg=$(awk '{ print $3 }' /proc/loadavg) # 15 minute load average
    long_load_avg=$(echo "( ${long_load_avg} / ${performance_cores} )" | bc -l | xargs printf "%.2f")
    if (($(echo "$recent_load_avg > $long_load_avg" | bc -l))); then
        if [[ "$(echo "$recent_load_avg > 0.8" | bc -l)" == 1 ]]; then
            export adjusted_load_avg=$recent_load_avg
            export shown_load_type='1m'
            log_high_cpu
            return 0
        fi
    # 70% CPU usage for 15 minutes is A LOT on my tiny systems.
    elif [[ "$(echo "$long_load_avg > 0.7" | bc -l)" == 1 ]]; then
        export adjusted_load_avg=$long_load_avg
        export shown_load_type='15m'
        return 0
    fi
    return 1
}

is_disk_filling() {
    disk_usage=$(df -hl --output=pcent / | tail -n +2 | sed 's/[^0-9]*//g')
    test "$disk_usage" -ge 80
}

is_ram_use_high() {
    local used
    local total
    used=$(free -m | awk '{if (NR==2) {{print $3}}}')
    total=$(free -m | awk '{if (NR==2) {{print $2}}}')
    ram_usage=$( (bc -l <<<"scale=3; fract=($used / $total); scale=0; fract * 100") | xargs printf "%.0f")
    test "$ram_usage" -gt 70
}

is_system_ok() {
    local system_state_path="$XDG_STATE_HOME/dotfiles/system_state"
    local lines
    local line
    local user
    local state
    local timestamp
    local relative_ts
    if [[ -e "$system_state_path" ]]; then
        mapfile -t lines < <(cat "$system_state_path")
        for line in "${lines[@]}"; do
            user=$(echo "$line" | awk '{ print $1 }')
            state=$(echo "$line" | awk '{ print $2 }')
            timestamp=$(echo "$line" | awk '{ print $3 }')
            relative_ts="$(ts_to_relative "$timestamp")"
            if [[ "$state" != 'running' ]]; then
                export degraded_user="$user"
                export degraded_relative_ts="$relative_ts"
                return 1
            fi
        done
    fi
    return 0
}
ts_to_relative() {
    unix_ts=$1
    systemd-analyze timestamp "$(date -d @"$unix_ts" --iso-8601=seconds)" | grep 'From now:' | awk -F ':' '{ print $2 }' | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//'
}

prepend_state() {
    local state_to_prepend="$1"
    if [[ "${status_right:0:1}" != '║' ]]; then
        status_right="│ $status_right"
    fi
    status_right="$state_to_prepend $status_right"
}

local_datetime=$(TZ=$TIME_ZONE date +"%Y-%m-%d T %H:%M")
utc_time=$(date +'%H:%M' --utc)

local_date=$(TZ=$TIME_ZONE date +"%Y-%m-%d")
utc_date=$(date +"%Y-%m-%d" --utc)

if [[ $utc_date == "$local_date" ]]; then
    utc_datetime="/ #[fg=colour250,bold]${utc_time}Z"
else
    utc_month_day=$(date +'%m-%d' --utc)
    utc_datetime="/ #[fg=colour250,bold]${utc_time}Z $utc_month_day"
fi

status_right="║ $local_datetime $utc_datetime"
# This status_right will be (at most) 34 characters before the following code.
# This 34 character length does not include the +20 characters of color data.
status_bg=$NORMAL_GREY
status_fg=$TEXT_GRAY

if [[ -e /var/run/reboot-required ]]; then
    status_fg=$TEXT_WHITE
    status_bg=$WARNING_RED
    prepend_state "REBOOT"
elif ! is_system_ok; then
    status_fg=$TEXT_WHITE
    status_bg=$WARNING_RED
    if [[ $degraded_user == 'root' ]]; then
        prepend_state "System is degraded since $degraded_relative_ts"
    else
        prepend_state "$degraded_user degraded since $degraded_relative_ts"
    fi
else
    if command -v mail >/dev/null 2>&1 && mail -e >/dev/null 2>&1; then
        status_fg=$TEXT_WHITE
        status_bg=$INFO_BLUE
        prepend_state "New mail!"
    fi
    if command -v mail >/dev/null 2>&1 && sudo --non-interactive mail -e >/dev/null 2>&1; then
        status_fg=$TEXT_WHITE
        status_bg=$INFO_BLUE
        prepend_state "New mail for root!"
    fi
    if is_cpu_load_high; then
        status_fg=$TEXT_WHITE
        status_bg=$WARNING_ORANGE
        prepend_state "$shown_load_type CPU $adjusted_load_avg"
    fi
    if is_disk_filling; then
        status_fg=$TEXT_WHITE
        status_bg=$WARNING_ORANGE
        prepend_state "DISK $disk_usage%"
    fi
    if is_ram_use_high; then
        status_fg=$TEXT_WHITE
        status_bg=$WARNING_ORANGE
        prepend_state "RAM $ram_usage%"
    fi
    status_len=$((${#status_right} - NON_PRINTED_CHARS))
    if [[ $status_len -lt 50 ]]; then
        prepend_state "$(hostname)"
    fi
fi
status_len=$((${#status_right} - NON_PRINTED_CHARS))

tmux set-option -g status-right-length "$status_len"
tmux set-option -g status-style bg=$status_bg,fg=$status_fg
echo "$status_right"
